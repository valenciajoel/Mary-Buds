#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

class Connection
{

private:
  // VARIABLES

  // UDP
  int puertoUDP;
  int packetSize;
  char packetBuffer[UDP_TX_PACKET_MAX_SIZE + 1];
  WiFiUDP Udp;

  // TCP
  WiFiClient client;
  IPAddress ipAux;
  int portTCP;

  //HTTP
  HTTPClient http;






public:
  Connection(int puertoUDP_Aux, int portTCP_Aux)
  {

    // CONSTRUCTORES

    // UDP
    puertoUDP = puertoUDP_Aux;
    Udp.begin(puertoUDP);

    // TCP
    portTCP = portTCP_Aux;


    
  }

  // CABECERAS

  // red wifi
  //bool conectarWifi(String ssid, String password, int timeOutSegundos);
  int conectarWifi(String ssid, String password, int timeOutSegundos);

  // UDP
  void enviarUDP();
  void enviarBroadcastUDP(String mensaje);
  String escucharUDP();
  void enviarTCP(String ip, String mensaje);
  void prenderAP(String ssidAP, String passwordAP, bool oculta, int maxConecction, int timeOutSegundos);
  String getIp();
  void enviarIp(int intentos);
  int enviarAvisoActuador(String ip,int evento,int intentos);
  int validarCredencialesWifi (String ssid, String password, int secondTimeOut);
  

};


int Connection :: enviarAvisoActuador(String ip,int evento,int intentos){

    int code = http.GET();
    int cont = 0;
    while (cont<intentos &&  code!=200)
    {
      http.begin(client,ip + "/evento?evento="+evento);
      cont++;
      code = http.GET();
    }

    return code;
    
}


void Connection :: enviarIp(int intentos){
    //HTTP
 String ipEmisor = Udp.remoteIP().toString().c_str();

  Serial.print("IP emisor:");
  Serial.println(ipEmisor);


    String ip =  getIp();

   // http.begin(client,"http://c6a13c94-0aea-4de9-a953-2faff89bf42e.mock.pstmn.io/test");
    int code = http.GET();
    int cont = 0;
    while (cont<intentos &&  code!=201)
    {
      http.begin(client,ipEmisor + "/test?ip="+ip);
      cont++;
      code = http.GET();
    }
    

}



String Connection :: getIp(){
  return WiFi.localIP().toString().c_str();
}

void Connection ::prenderAP(String ssidAP, String passwordAP, bool oculta, int maxConecction, int timeOutSegundos)
{

  WiFi.mode(WIFI_AP);
  Serial.println("Access Point ON");
  int startTime = millis();
  while (!WiFi.softAP(ssidAP, passwordAP, oculta, maxConecction) && (millis() - startTime) <= timeOutSegundos * 1000)
  {
    Serial.print(".");
    delay(100);
  }
}

void Connection::enviarTCP(String ip, String mensaje)
{

  ipAux.fromString(ip);
  if (!client.connect(ipAux, portTCP))
  {
    Serial.println("connection failed");
    return;
  }

  client.print(mensaje);

  while (client.available())
  {
    String reply = client.readStringUntil('\r');
    Serial.print(reply);
  }
}

String Connection::escucharUDP()
{
  String respuesta = "";
  // buffer para recibir paquetes de datos
  packetSize = Udp.parsePacket();
  if (packetSize)
  {
    
        Serial.printf("Received packet of size %d from %s:%d\n    (to %s:%d, free heap = %d B)\n",
        packetSize,
        Udp.remoteIP().toString().c_str(), Udp.remotePort(),
        Udp.destinationIP().toString().c_str(), Udp.localPort(),
        ESP.getFreeHeap());
  
    // read the packet into packetBufffer
    int n = Udp.read(packetBuffer, UDP_TX_PACKET_MAX_SIZE);
    packetBuffer[n] = 0;
    // Serial.println("Contents:");
    // Serial.println(packetBuffer);

    // int n = Udp.read(packetBuffer, UDP_TX_PACKET_MAX_SIZE);
    // packetBuffer[n] = 0;
    return packetBuffer;
  }
  return respuesta;
}


void Connection ::enviarBroadcastUDP(String mensaje)
{
  Udp.beginPacket("255.255.255.255", puertoUDP);
  mensaje = "mi ip es : " + WiFi.localIP().toString();
  Udp.write(mensaje.c_str());
  Udp.endPacket();
  Serial.println("Broadcast enviado");
}



/*
bool Connection ::conectarWifi(String ssid, String password, int timeOutSegundos)
{
  // variables
  bool conectado = false;

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Conectando a:");
  Serial.println(ssid);
  Serial.print("password:");
  Serial.println(password);
  int startTime = millis();
  while (WiFi.status() != WL_CONNECTED && (millis() - startTime) <= timeOutSegundos * 1000)
  {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED)
  {
    // Mostrar mensaje de exito y direcciÃ³n IP asignada
    Serial.println();
    Serial.print("Conectado a:\t");
    Serial.println(WiFi.SSID());
    Serial.print("IP address:\t");
    Serial.println(WiFi.localIP());
    conectado = true;
  }
  else
  {
    WiFi.disconnect();
  }

  return conectado;
}
*/




int Connection ::conectarWifi(String ssid, String password, int timeOutSegundos)
{
  // variables
  bool conectado = false;

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Conectando a:");
  Serial.println(ssid);
  Serial.print("password:");
  Serial.println(password);
  int startTime = millis();
  while (WiFi.status() != WL_CONNECTED && (millis() - startTime) <= timeOutSegundos * 1000)
  {
    delay(500);
    Serial.print(".");
  }


  return WiFi.status();


}


int Connection :: validarCredencialesWifi (String ssid, String password, int secondTimeOut){


conectarWifi(ssid,password,secondTimeOut);
unsigned long timeoutLength = secondTimeOut*1000;
return (int) WiFi.waitForConnectResult(timeoutLength);
//return WiFi.waitForConnectResult(unsigned long timeoutLength = 10000);




}